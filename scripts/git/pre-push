#!/bin/sh

exec 0< /dev/tty

GREEN="\e[1;32m"
RED="\e[0;31m"
STOP="\e[0m"

PROJECT_WORK_DIR=$(pwd)
ENVIRONMENT_STATUS=0
MODULE_STATUS=0

#
# functions
#

task_success () {
  if [ "$1" -eq 0 ]; then
    printf '%b\033[1mSUCCESS\033[0m%b\n' "${GREEN}" "${STOP}"
  else
    printf '%b\033[1mFAILED\033[0m%b\n' "${RED}" "${STOP}"
    ENVIRONMENT_STATUS=$((ENVIRONMENT_STATUS+1))
  fi
}


#
# tf fmt
#

figlet tf fmt
printf '%b\n' "\033[1m--------\033[0m"

tf_fmt=$(terraform fmt -check -recursive)

if [ -n "$tf_fmt" ]; then
  for i in $tf_fmt; do
    terraform fmt -check -diff "$i"
    printf '\n'
  done
  if [ -n "$tf_fmt" ]; then
    printf '%b\n' "\033[1m--------\033[0m"
    printf '%s\n\n' "$tf_fmt"
    printf '%bCommit these files..?%b ' "${GREEN}" "${STOP}"
    while true; do
      printf '[y/n] '
      read -r response

      case "$response" in
          [yY])
            terraform fmt -recursive -write=true
            for i in $tf_fmt; do
              git add "$i"
            done
            git commit -m 'Automated: pre-push tf formatting...'
            break
            ;;
          [nN])
            printf '%b"No" selected, continuing script...%b\n' "${GREEN}" "${STOP}"
            printf '%b\n' "\033[1m--------\033[0m"
            break
            ;;
          *)
            printf 'Please enter: '
            exit 1
            # [TODO: catch all case not currently workinfg]
          ;;
      esac
    done
  fi
else
  printf '%bNo formatting issues detected...%b\n' "${GREEN}" "${STOP}"
  printf '%b\n' "\033[1m--------\033[0m"
fi


#
# tflint
#

figlet tf lint
printf '%b\n' "\033[1m--------\033[0m"

if [ ! "$(which tflint)" ]; then
  printf '%bError: tflint not found!%b\n' "${RED}" "${STOP}"
  exit 1
fi

for m in "$PROJECT_WORK_DIR"/modules/*; do
  printf 'Linting module:\t%b\n' "\033[1m$m\033[0m"
  tflint --deep --module "$m"

  if tflint --deep --module "$m"; then
    printf '%bNo issues found...%b\n' "${GREEN}" "${STOP}"
    printf '%b\n' "\033[1m--------\033[0m"

  else
    printf '%b\033[1mFAILED\033[0m%b\n\n' "${RED}" "${STOP}"
    printf '%b\n' "\033[1m--------\033[0m"
    MODULE_STATUS=$((MODULE_STATUS+1))

  fi
done

if [ ${MODULE_STATUS} -gt 0 ]; then
  printf '\n%b\033[1mModules failing linting.\033[0m%b\n' "${RED}" "${STOP}"
  printf '%b\n' "\033[1m--------\033[0m"

fi

for e in "$PROJECT_WORK_DIR"/environments/*; do
  printf 'Linting environment:\t%b\n' "\033[1m$e\033[0m"
  cd "$e" || { printf 'Directory not found: %s' "$e"; exit 1; }

  printf '\ntf init:\t'
  terraform init > /dev/null
  task_success $?

  printf 'tf lint:\t'
  tflint --deep --module "${e}" > /dev/null
  task_success $?

  printf 'tf validate:\t'
  terraform validate > /dev/null
  task_success $?

  printf '%b' "\033[1m--------\033[0m"
  printf '\n'

done

if [ $ENVIRONMENT_STATUS -gt 0 ]; then
  printf '%b\033[1mEnvironment failling linting.\033[0m%b\n\n' "${RED}" "${STOP}"
  printf '%b\n' "\033[1m--------\033[0m"

fi

if [ $MODULE_STATUS -gt 0 ] || [ $ENVIRONMENT_STATUS -gt 0 ]; then
  printf '%b\033[1mError: linting failed, exiting...\033[0m%b' "${RED}" "${STOP}"
  exit 1

fi

#
# terraform-docs
#

MODULES_DIR="$PROJECT_WORK_DIR/modules"

figlet tf docs
printf '%b\n' "\033[1m--------\033[0m"

for m in "$MODULES_DIR"/*; do
  printf 'Documenting module: %b\n\n' "\033[1m${m}\033[0m"
  DOCS_DIR="${m}/docs"

  if [ ! -f "$DOCS_DIR/tfdoc.md" ]; then
    printf '%b\033[1mNo documentation exists...\033[0m%b\n\n' "${RED}" "${STOP}"
    printf '%b\033[1mCreate & commit new documentation..?\033[0m%b ' "${GREEN}" "${STOP}"

    while true; do
      printf '[y/n] '
      read -r response

      case "$response" in
          [yY])
            mkdir -p "$DOCS_DIR"
            terraform-docs markdown "${m}" > "$DOCS_DIR"/tfdoc.md
            git add "$DOCS_DIR"/tfdoc.md
            git commit -m 'Automated: updating documentation for ' "$m"
            printf '%b\n' "\033[1m--------\033[0m"
            break
            ;;
          [nN])
            printf '%b"No" selected, continuing script...%b\n' "${GREEN}" "${STOP}"
            printf '%b\n' "\033[1m--------\033[0m"
            break
            ;;
          *)
            printf 'Please enter: '
            exit 1
            # [TODO: catch all case not currently working]
          ;;
      esac
    done
  else
    if [ "$(terraform-docs markdown "${m}" | diff -U 1 "$DOCS_DIR"/tfdoc.md -)" ]; then
      terraform-docs markdown "${m}" | diff -U 1 "$DOCS_DIR"/tfdoc.md -
      printf 'Commit these changes..? '

      while true; do
        printf '[y/n] '
        read -r response

        case "$response" in
            [yY])
              terraform-docs markdown "${m}" > "$DOCS_DIR"/tfdoc.md
              git add "${m}"/tfdoc.md
              printf '%b\n' "\033[1m--------\033[0m"
              break
              ;;
            [nN])
              printf '%b"No" selected, continuing script...%b\n' "${GREEN}" "${STOP}"
              printf '%b\n' "\033[1m--------\033[0m"
              break
              ;;
            *)
              printf 'Please enter: '
              exit 1
              # [TODO: catch all case not currently working]
            ;;
        esac
      done
      git commit -m 'Automated: updating module documentation.'
    else
      printf '%bNo changes to commit...%b\n' "${GREEN}" "${STOP}"
      printf '%b\n' "\033[1m--------\033[0m"

    fi
  fi
done